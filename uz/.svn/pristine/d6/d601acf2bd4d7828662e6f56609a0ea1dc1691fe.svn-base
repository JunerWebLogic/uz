<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="evo.dao.SysUserMapper" >
  <resultMap id="BaseResultMap" type="evo.model.SysUser" >
    <id column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="role_id" property="roleId" jdbcType="INTEGER" />
    <result column="dept_id" property="deptId" jdbcType="INTEGER" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="user_pass" property="userPass" jdbcType="VARCHAR" />
    <result column="user_create_time" property="userCreateTime" jdbcType="VARCHAR" />
    <result column="user_phone" property="userPhone" jdbcType="VARCHAR" />
    <result column="user_sex" property="userSex" jdbcType="INTEGER" />
    <result column="user_able" property="userAble" jdbcType="INTEGER" />
  </resultMap>
  
  <sql id="Base_Column_List" >
    user_id, role_id, dept_id, user_name, user_pass, user_create_time, user_phone, user_sex, 
    user_able
  </sql>
  
  <!-- 根据用户名和密码查询用户信息 --><!-- 多个参数就不需要parameterType,改为{index}是第几个就用第几个的索引,索引从0开始 -->
  <select id="findSysUserByNameAndPass"  resultMap="BaseResultMap">
  	select 
  	<include refid="Base_Column_List" />
  	from sys_user
    where user_name = #{0} and user_pass = #{1}
  </select>
  
  
<!-- 根据userName和userPass查询角色信息 -->
<!-- parameterType="java.lang.String" --><!-- where b.role_id = a.role_id and b.user_name = #{userName,jdbcType=VARCHAR} -->
    <select id="findSysRoleByUserNameAndUserPass" resultMap="findSysRole">
		select 
  		a.role_name,
  		a.role_desc,
  		a.role_id,
  		b.user_id, 
		b.role_id, 
		b.user_name, 
		b.user_pass, 
		b.user_create_time, 
		b.user_phone, user_sex,      
		b.user_able   
		from sys_role a ,sys_user b 
  		where b.role_id = a.role_id and b.user_name = #{0} and b.user_pass = #{1}
  	</select>
     <resultMap type="evo.model.SysUser" id="findSysRole">
		    <id column="user_id" property="userId" jdbcType="INTEGER" />
		    <result column="dept_id" property="deptId" jdbcType="INTEGER" />
		    <result column="role_id" property="roleId" jdbcType="INTEGER" />
		    <result column="user_name" property="userName" jdbcType="VARCHAR" />
		    <result column="user_pass" property="userPass" jdbcType="VARCHAR" />
		    <result column="user_create_time" property="userCreateTime" jdbcType="VARCHAR" />
		    <result column="user_phone" property="userPhone" jdbcType="VARCHAR" />
		    <result column="user_sex" property="userSex" jdbcType="INTEGER" />
		    <result column="user_able" property="userAble" jdbcType="INTEGER" />
  	  <association property="sysRoles" javaType="evo.model.SysRole" >
  	  		 <id column="role_id" property="roleId" jdbcType="INTEGER" />
		    <result column="role_name" property="roleName" jdbcType="VARCHAR" />
		    <result column="role_desc" property="roleDesc" jdbcType="VARCHAR" />
 	  </association>
  </resultMap>
   
  <!-- 用户注册 -->
  <insert id="insertSysUser" parameterType="evo.model.SysUser">
  insert into sys_user (user_id, role_id, dept_id, 
      user_name, user_pass, user_create_time, 
      user_phone, user_sex, user_able
      )
    values (#{userId,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER}, #{deptId,jdbcType=INTEGER}, 
      #{userName,jdbcType=VARCHAR}, #{userPass,jdbcType=VARCHAR}, #{userCreateTime,jdbcType=VARCHAR}, 
      #{userPhone,jdbcType=VARCHAR}, #{userSex,jdbcType=INTEGER}, #{userAble,jdbcType=INTEGER}
      )
  </insert>
  
  <!-- 删除用户(根据用户名和用户手机删除用户) -->
  <delete id="deleteSysUserByUserId" parameterType="java.lang.Integer">
  	delete from sys_user
  	where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  
  <!-- 根据用户名修改密码 -->
  <update id="updateSysUserByName" parameterType="evo.model.SysUser">
  	update sys_user set user_pass = #{userPass,jdbcType=VARCHAR} where user_name = #{userName,jdbcType=VARCHAR}
  </update>
  
  
  
  
  <!-- 以下是自动生成的SQL -->
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from sys_user
    where user_id = #{userId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from sys_user
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="evo.model.SysUser" >
    insert into sys_user (user_id, role_id, dept_id, 
      user_name, user_pass, user_create_time, 
      user_phone, user_sex, user_able
      )
    values (#{userId,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER}, #{deptId,jdbcType=INTEGER}, 
      #{userName,jdbcType=VARCHAR}, #{userPass,jdbcType=VARCHAR}, #{userCreateTime,jdbcType=VARCHAR}, 
      #{userPhone,jdbcType=VARCHAR}, #{userSex,jdbcType=INTEGER}, #{userAble,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="evo.model.SysUser" >
    insert into sys_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="roleId != null" >
        role_id,
      </if>
      <if test="deptId != null" >
        dept_id,
      </if>
      <if test="userName != null" >
        user_name,
      </if>
      <if test="userPass != null" >
        user_pass,
      </if>
      <if test="userCreateTime != null" >
        user_create_time,
      </if>
      <if test="userPhone != null" >
        user_phone,
      </if>
      <if test="userSex != null" >
        user_sex,
      </if>
      <if test="userAble != null" >
        user_able,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="roleId != null" >
        #{roleId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null" >
        #{deptId,jdbcType=INTEGER},
      </if>
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userPass != null" >
        #{userPass,jdbcType=VARCHAR},
      </if>
      <if test="userCreateTime != null" >
        #{userCreateTime,jdbcType=VARCHAR},
      </if>
      <if test="userPhone != null" >
        #{userPhone,jdbcType=VARCHAR},
      </if>
      <if test="userSex != null" >
        #{userSex,jdbcType=INTEGER},
      </if>
      <if test="userAble != null" >
        #{userAble,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="evo.model.SysUser" >
    update sys_user
    <set >
      <if test="roleId != null" >
        role_id = #{roleId,jdbcType=INTEGER},
      </if>
      <if test="deptId != null" >
        dept_id = #{deptId,jdbcType=INTEGER},
      </if>
      <if test="userName != null" >
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userPass != null" >
        user_pass = #{userPass,jdbcType=VARCHAR},
      </if>
      <if test="userCreateTime != null" >
        user_create_time = #{userCreateTime,jdbcType=VARCHAR},
      </if>
      <if test="userPhone != null" >
        user_phone = #{userPhone,jdbcType=VARCHAR},
      </if>
      <if test="userSex != null" >
        user_sex = #{userSex,jdbcType=INTEGER},
      </if>
      <if test="userAble != null" >
        user_able = #{userAble,jdbcType=INTEGER},
      </if>
    </set>
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="evo.model.SysUser" >
    update sys_user
    set role_id = #{roleId,jdbcType=INTEGER},
      dept_id = #{deptId,jdbcType=INTEGER},
      user_name = #{userName,jdbcType=VARCHAR},
      user_pass = #{userPass,jdbcType=VARCHAR},
      user_create_time = #{userCreateTime,jdbcType=VARCHAR},
      user_phone = #{userPhone,jdbcType=VARCHAR},
      user_sex = #{userSex,jdbcType=INTEGER},
      user_able = #{userAble,jdbcType=INTEGER}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  
  
</mapper>